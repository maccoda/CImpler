# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
#services:
#  - mysql:latest
#  - redis:latest
#  - postgres:latest
variables:
  CRATE: "cimpler"

stages:
  - build
  - docs
  # - coverage

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
before_script:
  - apt-get update -yqq
  - apt-get install -yqq pkg-config libssl-dev make cmake
  - apt-get install -yqq --no-install-recommends build-essential
  - curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly

# NOTE Now that using Rocket can only use nightly
# Use cargo to test the project
# test:stable:
#   stage: build
#   image: "scorpil/rust:stable"
#   script:
#     - rustc --version && cargo --version      # Print version info for debugging
#     - cargo test --all --verbose --jobs 1 --release # Don't paralize to make errors more readable

# # Use cargo to test the project
# test:beta:
#   stage: build
#   image: "scorpil/rust:beta"
#   script:
#     - rustc --version && cargo --version      # Print version info for debugging
#     - cargo test --all --verbose --jobs 1 --release # Don't paralize to make errors more readable

# Use cargo to test the project
test:nightly:
  stage: build
  # image: "scorpil/rust:nightly"
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo test --all --verbose --jobs 1 --release # Don't paralize to make errors more readable

# Upload user guide and docs
pages:
  stage: docs
  # image: "scorpil/rust:stable"
  script:
  - cargo install mdbook
  - export PATH=$(pwd)/bin:$HOME/.cargo/bin:$PATH
  - mdbook build -d ../public user_guide
  - cargo doc
  - mv target/doc public/

  artifacts:
    paths:
    - public

# code_cov:
#   stage: coverage
#   script: wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
#       tar xzf master.tar.gz &&
#       cd kcov-master &&
#       mkdir build &&
#       cd build &&
#       cmake .. &&
#       make &&
#       sudo make install &&
#       cd ../.. &&
#       rm -rf kcov-master &&
#       for file in target/debug/${CRATE}-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
#       bash <(curl -s https://codecov.io/bash) &&
#       echo "Uploaded code coverage"
#   when: on_success

cache:
  paths:
    - $HOME/.cargo
